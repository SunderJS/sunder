(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{68:function(e,n,o){"use strict";o.r(n),o.d(n,"frontMatter",(function(){return s})),o.d(n,"metadata",(function(){return u})),o.d(n,"rightToc",(function(){return l})),o.d(n,"default",(function(){return d}));var t=o(3),r=o(7),a=(o(0),o(94)),s={slug:"moving-towards-modules",title:"Moving Towards Cloudflare Workers Modules",author:"Guido Zuidhof",author_url:"https://github.com/gzuidhof",author_image_url:"https://avatars1.githubusercontent.com/u/1039510?s=460&v=4",tags:[]},u={permalink:"/blog/moving-towards-modules",editUrl:"https://github.com/gzuidhof/sunder/edit/master/website/blog/blog/2021-09-27-moving-towards-modules.md",source:"@site/blog\\2021-09-27-moving-towards-modules.md",description:"Sunder now supports the the new ES Modules syntax for Cloudflare Workers. By opting into modules you can get rid of relying on global variables floating around your codebase, and also unlock Durable Objects.",date:"2021-09-27T00:00:00.000Z",tags:[],title:"Moving Towards Cloudflare Workers Modules",readingTime:.86,truncated:!0,nextItem:{title:"Introducing Sunder",permalink:"/blog/introducing-sunder"}},l=[],i={rightToc:l};function d(e){var n=e.components,o=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(t.a)({},i,o,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Sunder now supports the ",Object(a.b)("a",Object(t.a)({parentName:"p"},{href:"https://developers.cloudflare.com/workers/cli-wrangler/configuration#modules"}),"the new ES Modules syntax for Cloudflare Workers"),". By opting into modules you can get rid of relying on global variables floating around your codebase, and also unlock Durable Objects."),Object(a.b)("p",null,"Before this was an option the entrypoint to your application would look something like this:"),Object(a.b)("pre",null,Object(a.b)("code",Object(t.a)({parentName:"pre"},{className:"language-typescript"}),'import {Sunder, Router} from "sunder";\n\nconst app = new Sunder();\nconst router = new Router();\n\nrouter.get("/hello/:username", ({response, params}) => {\n    response.body = `Hello ${params.username}`;\n});\n\napp.use(router.middleware);\n\naddEventListener(\'fetch\', (event) => {\n    const resp = app.handle(event);\n    event.respondWith(resp);\n});\n')),Object(a.b)("p",null,"Now, new in version ",Object(a.b)("inlineCode",{parentName:"p"},"0.8.0"),", there is also a ",Object(a.b)("inlineCode",{parentName:"p"},"fetch")," function on the app which allows you to use the new syntax easily."),Object(a.b)("pre",null,Object(a.b)("code",Object(t.a)({parentName:"pre"},{className:"language-typescript"}),'import {Sunder, Router} from "sunder";\n\nconst app = new Sunder();\nconst router = new Router();\n\nrouter.get("/hello/:username", ({response, params}) => {\n    response.body = `Hello ${params.username}`;\n});\n\napp.use(router.middleware);\n\nexport default {\n    fetch(request, env, ctx) {\n        return app.fetch(request, env, ctx);\n    }\n}\n\n// Technically you could also use `export default app` if you only want to\n// subscribe to the fetch event.\n')))}d.isMDXComponent=!0}}]);